"""
Auto-generated Pydantic schemas from Tortoise ORM models.

This file is automatically generated by the schema sync system.
DO NOT EDIT MANUALLY - Changes will be overwritten.

Generated at: 2025-10-21T09:54:53.544743
"""
from datetime import datetime
from decimal import Decimal
from pydantic import BaseModel, Field, field_validator
from typing import Optional, Any, Dict, List


# ================================================================================
# User Schemas
# ================================================================================

class UserRole(str, Enum):
    """Enum for role"""
    ADMIN = "admin"
    USER = "user"

class UserCreate(BaseModel):
    """Schema for creating a new user"""
    full_name: str = Field(..., max_length=255, description="Full name of the user")
    mobile_number: Optional[str] = Field(None, max_length=20, description="Mobile number (optional)")
    pin_hash: str = Field(..., max_length=255, description="Hashed PIN for authentication")
    role: UserRole = Field(default="UserRole.USER", max_length=5, description="User role (admin or user)")
    is_active: bool = Field(default=True, description="Whether the user account is active")
    email: Optional[str] = Field(None, max_length=255, description="Email address (optional)")
    avatar_color: Optional[str] = Field(None, max_length=50, description="Avatar color identifier (e.g., 'blue', 'green', 'purple')")
    notes: Optional[str] = Field(None, description="Additional notes about the user")
    last_login: Optional[datetime] = Field(None, description="Last login timestamp")
    created_by: Optional[int] = Field(None, description="User who created this account")

class UserUpdate(BaseModel):
    """Schema for updating a user"""
    full_name: Optional[str] = Field(None, max_length=255, description="Full name of the user")
    mobile_number: Optional[str] = Field(None, max_length=20, description="Mobile number (optional)")
    pin_hash: Optional[str] = Field(None, max_length=255, description="Hashed PIN for authentication")
    role: Optional[UserRole] = Field(None, max_length=5, description="User role (admin or user)")
    is_active: Optional[bool] = Field(None, description="Whether the user account is active")
    email: Optional[str] = Field(None, max_length=255, description="Email address (optional)")
    avatar_color: Optional[str] = Field(None, max_length=50, description="Avatar color identifier (e.g., 'blue', 'green', 'purple')")
    notes: Optional[str] = Field(None, description="Additional notes about the user")
    last_login: Optional[datetime] = Field(None, description="Last login timestamp")
    created_by: Optional[int] = Field(None, description="User who created this account")

class UserResponse(BaseModel):
    """Schema for user response"""
    id: int = Field(..., description="Primary key")
    created_at: datetime = Field(..., description="Timestamp when the record was created")
    updated_at: datetime = Field(..., description="Timestamp when the record was last updated")
    full_name: str = Field(..., max_length=255, description="Full name of the user")
    mobile_number: Optional[str] = Field(None, max_length=20, description="Mobile number (optional)")
    pin_hash: str = Field(..., max_length=255, description="Hashed PIN for authentication")
    role: UserRole = Field(default="UserRole.USER", max_length=5, description="User role (admin or user)")
    is_active: bool = Field(default=True, description="Whether the user account is active")
    email: Optional[str] = Field(None, max_length=255, description="Email address (optional)")
    avatar_color: Optional[str] = Field(None, max_length=50, description="Avatar color identifier (e.g., 'blue', 'green', 'purple')")
    notes: Optional[str] = Field(None, description="Additional notes about the user")
    last_login: Optional[datetime] = Field(None, description="Last login timestamp")
    created_by: Optional[int] = Field(None, description="User who created this account")

    class Config:
        from_attributes = True


# ================================================================================
# Customer Schemas
# ================================================================================

class CustomerCreate(BaseModel):
    """Schema for creating a new customer"""
    name: str = Field(..., max_length=255, description="Customer full name")
    phone: Optional[str] = Field(None, max_length=20, description="Customer phone number")
    email: Optional[str] = Field(None, max_length=255, description="Customer email address")
    address: Optional[str] = Field(None, description="Customer address")
    loyalty_points: int = Field(default=0, description="Loyalty points accumulated")
    credit_limit: Decimal = Field(default=0.00, max_digits=10, decimal_places=2, description="Maximum credit limit allowed for this customer")
    credit_balance: Decimal = Field(default=0.00, max_digits=10, decimal_places=2, description="Current credit balance (amount owed by customer)")
    credit_status: str = Field(default="good", max_length=20, description="Credit status: good, warning, exceeded, blocked")
    created_by: Optional[int] = Field(None, description="User who created this customer record")

class CustomerUpdate(BaseModel):
    """Schema for updating a customer"""
    name: Optional[str] = Field(None, max_length=255, description="Customer full name")
    phone: Optional[str] = Field(None, max_length=20, description="Customer phone number")
    email: Optional[str] = Field(None, max_length=255, description="Customer email address")
    address: Optional[str] = Field(None, description="Customer address")
    loyalty_points: Optional[int] = Field(None, description="Loyalty points accumulated")
    credit_limit: Optional[Decimal] = Field(None, max_digits=10, decimal_places=2, description="Maximum credit limit allowed for this customer")
    credit_balance: Optional[Decimal] = Field(None, max_digits=10, decimal_places=2, description="Current credit balance (amount owed by customer)")
    credit_status: Optional[str] = Field(None, max_length=20, description="Credit status: good, warning, exceeded, blocked")
    created_by: Optional[int] = Field(None, description="User who created this customer record")

class CustomerResponse(BaseModel):
    """Schema for customer response"""
    id: int = Field(..., description="Primary key")
    created_at: datetime = Field(..., description="Timestamp when the record was created")
    updated_at: datetime = Field(..., description="Timestamp when the record was last updated")
    name: str = Field(..., max_length=255, description="Customer full name")
    phone: Optional[str] = Field(None, max_length=20, description="Customer phone number")
    email: Optional[str] = Field(None, max_length=255, description="Customer email address")
    address: Optional[str] = Field(None, description="Customer address")
    loyalty_points: int = Field(default=0, description="Loyalty points accumulated")
    credit_limit: Decimal = Field(default=0.00, max_digits=10, decimal_places=2, description="Maximum credit limit allowed for this customer")
    credit_balance: Decimal = Field(default=0.00, max_digits=10, decimal_places=2, description="Current credit balance (amount owed by customer)")
    credit_status: str = Field(default="good", max_length=20, description="Credit status: good, warning, exceeded, blocked")
    created_by: Optional[int] = Field(None, description="User who created this customer record")

    class Config:
        from_attributes = True


# ================================================================================
# CustomerTransaction Schemas
# ================================================================================

class CustomerTransactionCreate(BaseModel):
    """Schema for creating a new customertransaction"""
    customer: int = Field(..., description="Customer associated with this transaction")
    transaction_type: str = Field(..., max_length=50, description="Type of transaction")
    amount: Decimal = Field(default=0.00, max_digits=10, decimal_places=2, description="Transaction amount (for credit/payment transactions)")
    loyalty_points: int = Field(default=0, description="Loyalty points affected by this transaction")
    balance_before: Decimal = Field(default=0.00, max_digits=10, decimal_places=2, description="Credit balance before this transaction")
    balance_after: Decimal = Field(default=0.00, max_digits=10, decimal_places=2, description="Credit balance after this transaction")
    loyalty_points_before: int = Field(default=0, description="Loyalty points before this transaction")
    loyalty_points_after: int = Field(default=0, description="Loyalty points after this transaction")
    reference_number: Optional[str] = Field(None, max_length=100, description="Reference number (invoice, receipt, etc.)")
    notes: Optional[str] = Field(None, description="Additional notes about the transaction")
    created_by: Optional[int] = Field(None, description="User who created this transaction")

class CustomerTransactionUpdate(BaseModel):
    """Schema for updating a customertransaction"""
    customer: Optional[int] = Field(None, description="Customer associated with this transaction")
    transaction_type: Optional[str] = Field(None, max_length=50, description="Type of transaction")
    amount: Optional[Decimal] = Field(None, max_digits=10, decimal_places=2, description="Transaction amount (for credit/payment transactions)")
    loyalty_points: Optional[int] = Field(None, description="Loyalty points affected by this transaction")
    balance_before: Optional[Decimal] = Field(None, max_digits=10, decimal_places=2, description="Credit balance before this transaction")
    balance_after: Optional[Decimal] = Field(None, max_digits=10, decimal_places=2, description="Credit balance after this transaction")
    loyalty_points_before: Optional[int] = Field(None, description="Loyalty points before this transaction")
    loyalty_points_after: Optional[int] = Field(None, description="Loyalty points after this transaction")
    reference_number: Optional[str] = Field(None, max_length=100, description="Reference number (invoice, receipt, etc.)")
    notes: Optional[str] = Field(None, description="Additional notes about the transaction")
    created_by: Optional[int] = Field(None, description="User who created this transaction")

class CustomerTransactionResponse(BaseModel):
    """Schema for customertransaction response"""
    id: int = Field(..., description="Primary key")
    created_at: datetime = Field(..., description="Timestamp when the record was created")
    updated_at: datetime = Field(..., description="Timestamp when the record was last updated")
    customer: int = Field(..., description="Customer associated with this transaction")
    transaction_type: str = Field(..., max_length=50, description="Type of transaction")
    amount: Decimal = Field(default=0.00, max_digits=10, decimal_places=2, description="Transaction amount (for credit/payment transactions)")
    loyalty_points: int = Field(default=0, description="Loyalty points affected by this transaction")
    balance_before: Decimal = Field(default=0.00, max_digits=10, decimal_places=2, description="Credit balance before this transaction")
    balance_after: Decimal = Field(default=0.00, max_digits=10, decimal_places=2, description="Credit balance after this transaction")
    loyalty_points_before: int = Field(default=0, description="Loyalty points before this transaction")
    loyalty_points_after: int = Field(default=0, description="Loyalty points after this transaction")
    reference_number: Optional[str] = Field(None, max_length=100, description="Reference number (invoice, receipt, etc.)")
    notes: Optional[str] = Field(None, description="Additional notes about the transaction")
    created_by: Optional[int] = Field(None, description="User who created this transaction")

    class Config:
        from_attributes = True


# ================================================================================
# Product Schemas
# ================================================================================

class ProductType(str, Enum):
    """Enum for product_type"""
    SIMPLE = "simple"
    BUNDLE = "bundle"
    VARIATION = "variation"
    SERVICE = "service"

class ItemType(str, Enum):
    """Enum for item_type"""
    PRODUCT = "product"
    SERVICE = "service"

class ProductCreate(BaseModel):
    """Schema for creating a new product"""
    name: str = Field(..., max_length=255, description="Product name")
    description: Optional[str] = Field(None, description="Detailed description")
    sku: Optional[str] = Field(None, max_length=100, description="Stock Keeping Unit (SKU) - unique identifier")
    barcode: Optional[str] = Field(None, max_length=100, description="Barcode for scanning")
    product_type: ProductType = Field(default="ProductType.SIMPLE", max_length=9, description="Product type (simple/bundle/variation/service)")
    item_type: ItemType = Field(default="ItemType.PRODUCT", max_length=7, description="DEPRECATED: Use product_type instead")
    category: Optional[int] = Field(None, description="Product category")
    base_price: Decimal = Field(default=0, max_digits=10, decimal_places=2, description="Base selling price")
    cost_price: Decimal = Field(default=0, max_digits=10, decimal_places=2, description="Cost price (purchase price)")
    selling_price: Decimal = Field(default=0, max_digits=10, decimal_places=2, description="DEPRECATED: Use base_price instead")
    tax: Optional[int] = Field(None, description="Tax rule applied to this product")
    tax_rate: Decimal = Field(default=0, max_digits=5, decimal_places=2, description="DEPRECATED: Use tax relationship instead")
    is_active: bool = Field(default=True, description="Whether the product is active and available for sale")
    track_inventory: bool = Field(default=True, description="Whether to track inventory for this item")
    stock_quantity: int = Field(default=0, description="Current stock quantity")
    current_stock: int = Field(default=0, description="DEPRECATED: Use stock_quantity instead")
    low_stock_threshold: int = Field(default=0, description="Low stock alert threshold")
    min_stock_level: int = Field(default=0, description="DEPRECATED: Use low_stock_threshold instead")
    max_stock_level: int = Field(default=0, description="Maximum stock level")
    image_paths: Dict = Field(default_factory=list, description="Array of image paths for this product")
    image_url: Optional[str] = Field(None, max_length=500, description="DEPRECATED: Use image_paths instead")
    notes: Optional[str] = Field(None, description="Additional notes")
    created_by: Optional[int] = Field(None, description="User who created this product")

class ProductUpdate(BaseModel):
    """Schema for updating a product"""
    name: Optional[str] = Field(None, max_length=255, description="Product name")
    description: Optional[str] = Field(None, description="Detailed description")
    sku: Optional[str] = Field(None, max_length=100, description="Stock Keeping Unit (SKU) - unique identifier")
    barcode: Optional[str] = Field(None, max_length=100, description="Barcode for scanning")
    product_type: Optional[ProductType] = Field(None, max_length=9, description="Product type (simple/bundle/variation/service)")
    item_type: Optional[ItemType] = Field(None, max_length=7, description="DEPRECATED: Use product_type instead")
    category: Optional[int] = Field(None, description="Product category")
    base_price: Optional[Decimal] = Field(None, max_digits=10, decimal_places=2, description="Base selling price")
    cost_price: Optional[Decimal] = Field(None, max_digits=10, decimal_places=2, description="Cost price (purchase price)")
    selling_price: Optional[Decimal] = Field(None, max_digits=10, decimal_places=2, description="DEPRECATED: Use base_price instead")
    tax: Optional[int] = Field(None, description="Tax rule applied to this product")
    tax_rate: Optional[Decimal] = Field(None, max_digits=5, decimal_places=2, description="DEPRECATED: Use tax relationship instead")
    is_active: Optional[bool] = Field(None, description="Whether the product is active and available for sale")
    track_inventory: Optional[bool] = Field(None, description="Whether to track inventory for this item")
    stock_quantity: Optional[int] = Field(None, description="Current stock quantity")
    current_stock: Optional[int] = Field(None, description="DEPRECATED: Use stock_quantity instead")
    low_stock_threshold: Optional[int] = Field(None, description="Low stock alert threshold")
    min_stock_level: Optional[int] = Field(None, description="DEPRECATED: Use low_stock_threshold instead")
    max_stock_level: Optional[int] = Field(None, description="Maximum stock level")
    image_paths: Optional[Dict] = Field(None, description="Array of image paths for this product")
    image_url: Optional[str] = Field(None, max_length=500, description="DEPRECATED: Use image_paths instead")
    notes: Optional[str] = Field(None, description="Additional notes")
    created_by: Optional[int] = Field(None, description="User who created this product")

class ProductResponse(BaseModel):
    """Schema for product response"""
    id: int = Field(..., description="Primary key")
    created_at: datetime = Field(..., description="Timestamp when the record was created")
    updated_at: datetime = Field(..., description="Timestamp when the record was last updated")
    name: str = Field(..., max_length=255, description="Product name")
    description: Optional[str] = Field(None, description="Detailed description")
    sku: Optional[str] = Field(None, max_length=100, description="Stock Keeping Unit (SKU) - unique identifier")
    barcode: Optional[str] = Field(None, max_length=100, description="Barcode for scanning")
    product_type: ProductType = Field(default="ProductType.SIMPLE", max_length=9, description="Product type (simple/bundle/variation/service)")
    item_type: ItemType = Field(default="ItemType.PRODUCT", max_length=7, description="DEPRECATED: Use product_type instead")
    category: Optional[int] = Field(None, description="Product category")
    base_price: Decimal = Field(default=0, max_digits=10, decimal_places=2, description="Base selling price")
    cost_price: Decimal = Field(default=0, max_digits=10, decimal_places=2, description="Cost price (purchase price)")
    selling_price: Decimal = Field(default=0, max_digits=10, decimal_places=2, description="DEPRECATED: Use base_price instead")
    tax: Optional[int] = Field(None, description="Tax rule applied to this product")
    tax_rate: Decimal = Field(default=0, max_digits=5, decimal_places=2, description="DEPRECATED: Use tax relationship instead")
    is_active: bool = Field(default=True, description="Whether the product is active and available for sale")
    track_inventory: bool = Field(default=True, description="Whether to track inventory for this item")
    stock_quantity: int = Field(default=0, description="Current stock quantity")
    current_stock: int = Field(default=0, description="DEPRECATED: Use stock_quantity instead")
    low_stock_threshold: int = Field(default=0, description="Low stock alert threshold")
    min_stock_level: int = Field(default=0, description="DEPRECATED: Use low_stock_threshold instead")
    max_stock_level: int = Field(default=0, description="Maximum stock level")
    image_paths: Dict = Field(default_factory=list, description="Array of image paths for this product")
    image_url: Optional[str] = Field(None, max_length=500, description="DEPRECATED: Use image_paths instead")
    notes: Optional[str] = Field(None, description="Additional notes")
    created_by: Optional[int] = Field(None, description="User who created this product")

    class Config:
        from_attributes = True


# ================================================================================
# ProductBundle Schemas
# ================================================================================

class ProductBundleCreate(BaseModel):
    """Schema for creating a new productbundle"""
    bundle_product: int = Field(..., description="The bundle product")
    component_product: int = Field(..., description="Product included in the bundle")
    quantity: int = Field(default=1, description="Quantity of this component in the bundle")

class ProductBundleUpdate(BaseModel):
    """Schema for updating a productbundle"""
    bundle_product: Optional[int] = Field(None, description="The bundle product")
    component_product: Optional[int] = Field(None, description="Product included in the bundle")
    quantity: Optional[int] = Field(None, description="Quantity of this component in the bundle")

class ProductBundleResponse(BaseModel):
    """Schema for productbundle response"""
    id: int = Field(..., description="Primary key")
    created_at: datetime = Field(..., description="Timestamp when the record was created")
    updated_at: datetime = Field(..., description="Timestamp when the record was last updated")
    bundle_product: int = Field(..., description="The bundle product")
    component_product: int = Field(..., description="Product included in the bundle")
    quantity: int = Field(default=1, description="Quantity of this component in the bundle")

    class Config:
        from_attributes = True


# ================================================================================
# ProductCategory Schemas
# ================================================================================

class ProductCategoryCreate(BaseModel):
    """Schema for creating a new productcategory"""
    name: str = Field(..., max_length=255, description="Category name")
    description: Optional[str] = Field(None, description="Category description")
    image_path: Optional[str] = Field(None, max_length=500, description="Category image path")
    parent_category: Optional[int] = Field(None, description="Parent category for nested categories")
    display_order: int = Field(default=0, description="Display order for sorting")
    is_active: bool = Field(default=True, description="Whether the category is active")

class ProductCategoryUpdate(BaseModel):
    """Schema for updating a productcategory"""
    name: Optional[str] = Field(None, max_length=255, description="Category name")
    description: Optional[str] = Field(None, description="Category description")
    image_path: Optional[str] = Field(None, max_length=500, description="Category image path")
    parent_category: Optional[int] = Field(None, description="Parent category for nested categories")
    display_order: Optional[int] = Field(None, description="Display order for sorting")
    is_active: Optional[bool] = Field(None, description="Whether the category is active")

class ProductCategoryResponse(BaseModel):
    """Schema for productcategory response"""
    id: int = Field(..., description="Primary key")
    created_at: datetime = Field(..., description="Timestamp when the record was created")
    updated_at: datetime = Field(..., description="Timestamp when the record was last updated")
    name: str = Field(..., max_length=255, description="Category name")
    description: Optional[str] = Field(None, description="Category description")
    image_path: Optional[str] = Field(None, max_length=500, description="Category image path")
    parent_category: Optional[int] = Field(None, description="Parent category for nested categories")
    display_order: int = Field(default=0, description="Display order for sorting")
    is_active: bool = Field(default=True, description="Whether the category is active")

    class Config:
        from_attributes = True


# ================================================================================
# ProductVariation Schemas
# ================================================================================

class ProductVariationCreate(BaseModel):
    """Schema for creating a new productvariation"""
    parent_product: int = Field(..., description="Parent product")
    variation_name: str = Field(..., max_length=255, description="Variation name (e.g., 'Large Red', 'Small Blue')")
    sku: Optional[str] = Field(None, max_length=100, description="Unique SKU for this variation")
    barcode: Optional[str] = Field(None, max_length=100, description="Unique barcode for this variation")
    price_adjustment: Decimal = Field(default=0, max_digits=10, decimal_places=2, description="Price adjustment from base price (can be positive or negative)")
    cost_price: Optional[Decimal] = Field(None, max_digits=10, decimal_places=2, description="Cost price for this variation (overrides parent if set)")
    stock_quantity: int = Field(default=0, description="Stock quantity for this variation")
    attributes: Dict = Field(default_factory=dict, description="Variation attributes (e.g., {'size': 'Large', 'color': 'Red'})")
    is_active: bool = Field(default=True, description="Whether this variation is active")

class ProductVariationUpdate(BaseModel):
    """Schema for updating a productvariation"""
    parent_product: Optional[int] = Field(None, description="Parent product")
    variation_name: Optional[str] = Field(None, max_length=255, description="Variation name (e.g., 'Large Red', 'Small Blue')")
    sku: Optional[str] = Field(None, max_length=100, description="Unique SKU for this variation")
    barcode: Optional[str] = Field(None, max_length=100, description="Unique barcode for this variation")
    price_adjustment: Optional[Decimal] = Field(None, max_digits=10, decimal_places=2, description="Price adjustment from base price (can be positive or negative)")
    cost_price: Optional[Decimal] = Field(None, max_digits=10, decimal_places=2, description="Cost price for this variation (overrides parent if set)")
    stock_quantity: Optional[int] = Field(None, description="Stock quantity for this variation")
    attributes: Optional[Dict] = Field(None, description="Variation attributes (e.g., {'size': 'Large', 'color': 'Red'})")
    is_active: Optional[bool] = Field(None, description="Whether this variation is active")

class ProductVariationResponse(BaseModel):
    """Schema for productvariation response"""
    id: int = Field(..., description="Primary key")
    created_at: datetime = Field(..., description="Timestamp when the record was created")
    updated_at: datetime = Field(..., description="Timestamp when the record was last updated")
    parent_product: int = Field(..., description="Parent product")
    variation_name: str = Field(..., max_length=255, description="Variation name (e.g., 'Large Red', 'Small Blue')")
    sku: Optional[str] = Field(None, max_length=100, description="Unique SKU for this variation")
    barcode: Optional[str] = Field(None, max_length=100, description="Unique barcode for this variation")
    price_adjustment: Decimal = Field(default=0, max_digits=10, decimal_places=2, description="Price adjustment from base price (can be positive or negative)")
    cost_price: Optional[Decimal] = Field(None, max_digits=10, decimal_places=2, description="Cost price for this variation (overrides parent if set)")
    stock_quantity: int = Field(default=0, description="Stock quantity for this variation")
    attributes: Dict = Field(default_factory=dict, description="Variation attributes (e.g., {'size': 'Large', 'color': 'Red'})")
    is_active: bool = Field(default=True, description="Whether this variation is active")

    class Config:
        from_attributes = True


# ================================================================================
# StockAdjustment Schemas
# ================================================================================

class StockAdjustmentCreate(BaseModel):
    """Schema for creating a new stockadjustment"""
    adjustment_date: datetime = Field(..., description="Date and time of adjustment")
    reason: str = Field(..., max_length=255, description="Reason for adjustment")
    notes: Optional[str] = Field(None, description="Additional notes")
    performed_by: Optional[int] = Field(None, description="User who performed the adjustment")
    is_completed: bool = Field(default=False, description="Whether the adjustment is completed")

class StockAdjustmentUpdate(BaseModel):
    """Schema for updating a stockadjustment"""
    adjustment_date: Optional[datetime] = Field(None, description="Date and time of adjustment")
    reason: Optional[str] = Field(None, max_length=255, description="Reason for adjustment")
    notes: Optional[str] = Field(None, description="Additional notes")
    performed_by: Optional[int] = Field(None, description="User who performed the adjustment")
    is_completed: Optional[bool] = Field(None, description="Whether the adjustment is completed")

class StockAdjustmentResponse(BaseModel):
    """Schema for stockadjustment response"""
    id: int = Field(..., description="Primary key")
    created_at: datetime = Field(..., description="Timestamp when the record was created")
    updated_at: datetime = Field(..., description="Timestamp when the record was last updated")
    adjustment_date: datetime = Field(..., description="Date and time of adjustment")
    reason: str = Field(..., max_length=255, description="Reason for adjustment")
    notes: Optional[str] = Field(None, description="Additional notes")
    performed_by: Optional[int] = Field(None, description="User who performed the adjustment")
    is_completed: bool = Field(default=False, description="Whether the adjustment is completed")

    class Config:
        from_attributes = True


# ================================================================================
# StockAdjustmentLine Schemas
# ================================================================================

class StockAdjustmentLineCreate(BaseModel):
    """Schema for creating a new stockadjustmentline"""
    adjustment: int = Field(..., description="Parent stock adjustment")
    product: int = Field(..., description="Product being adjusted")
    expected_quantity: int = Field(..., description="Expected quantity (from system)")
    actual_quantity: int = Field(..., description="Actual quantity (from physical count)")
    difference: int = Field(..., description="Difference (actual - expected)")
    notes: Optional[str] = Field(None, description="Notes for this line item")

class StockAdjustmentLineUpdate(BaseModel):
    """Schema for updating a stockadjustmentline"""
    adjustment: Optional[int] = Field(None, description="Parent stock adjustment")
    product: Optional[int] = Field(None, description="Product being adjusted")
    expected_quantity: Optional[int] = Field(None, description="Expected quantity (from system)")
    actual_quantity: Optional[int] = Field(None, description="Actual quantity (from physical count)")
    difference: Optional[int] = Field(None, description="Difference (actual - expected)")
    notes: Optional[str] = Field(None, description="Notes for this line item")

class StockAdjustmentLineResponse(BaseModel):
    """Schema for stockadjustmentline response"""
    id: int = Field(..., description="Primary key")
    created_at: datetime = Field(..., description="Timestamp when the record was created")
    updated_at: datetime = Field(..., description="Timestamp when the record was last updated")
    adjustment: int = Field(..., description="Parent stock adjustment")
    product: int = Field(..., description="Product being adjusted")
    expected_quantity: int = Field(..., description="Expected quantity (from system)")
    actual_quantity: int = Field(..., description="Actual quantity (from physical count)")
    difference: int = Field(..., description="Difference (actual - expected)")
    notes: Optional[str] = Field(None, description="Notes for this line item")

    class Config:
        from_attributes = True


# ================================================================================
# StockTransaction Schemas
# ================================================================================

class TransactionType(str, Enum):
    """Enum for transaction_type"""
    PURCHASE = "purchase"
    SALE = "sale"
    ADJUSTMENT = "adjustment"
    RETURN = "return"
    DAMAGE = "damage"
    TRANSFER = "transfer"

class StockTransactionCreate(BaseModel):
    """Schema for creating a new stocktransaction"""
    transaction_type: TransactionType = Field(..., max_length=10, description="Type of transaction")
    product: int = Field(..., description="Product involved in the transaction")
    quantity: int = Field(..., description="Quantity changed (positive for additions, negative for reductions)")
    stock_before: int = Field(..., description="Stock level before transaction")
    stock_after: int = Field(..., description="Stock level after transaction")
    unit_cost: Optional[Decimal] = Field(None, max_digits=10, decimal_places=2, description="Unit cost at time of transaction")
    total_cost: Optional[Decimal] = Field(None, max_digits=10, decimal_places=2, description="Total cost of transaction")
    reference_number: Optional[str] = Field(None, max_length=100, description="Reference number (invoice, receipt, etc.)")
    notes: Optional[str] = Field(None, description="Additional notes about the transaction")
    performed_by: Optional[int] = Field(None, description="User who performed the transaction")

class StockTransactionUpdate(BaseModel):
    """Schema for updating a stocktransaction"""
    transaction_type: Optional[TransactionType] = Field(None, max_length=10, description="Type of transaction")
    product: Optional[int] = Field(None, description="Product involved in the transaction")
    quantity: Optional[int] = Field(None, description="Quantity changed (positive for additions, negative for reductions)")
    stock_before: Optional[int] = Field(None, description="Stock level before transaction")
    stock_after: Optional[int] = Field(None, description="Stock level after transaction")
    unit_cost: Optional[Decimal] = Field(None, max_digits=10, decimal_places=2, description="Unit cost at time of transaction")
    total_cost: Optional[Decimal] = Field(None, max_digits=10, decimal_places=2, description="Total cost of transaction")
    reference_number: Optional[str] = Field(None, max_length=100, description="Reference number (invoice, receipt, etc.)")
    notes: Optional[str] = Field(None, description="Additional notes about the transaction")
    performed_by: Optional[int] = Field(None, description="User who performed the transaction")

class StockTransactionResponse(BaseModel):
    """Schema for stocktransaction response"""
    id: int = Field(..., description="Primary key")
    created_at: datetime = Field(..., description="Timestamp when the record was created")
    updated_at: datetime = Field(..., description="Timestamp when the record was last updated")
    transaction_type: TransactionType = Field(..., max_length=10, description="Type of transaction")
    product: int = Field(..., description="Product involved in the transaction")
    quantity: int = Field(..., description="Quantity changed (positive for additions, negative for reductions)")
    stock_before: int = Field(..., description="Stock level before transaction")
    stock_after: int = Field(..., description="Stock level after transaction")
    unit_cost: Optional[Decimal] = Field(None, max_digits=10, decimal_places=2, description="Unit cost at time of transaction")
    total_cost: Optional[Decimal] = Field(None, max_digits=10, decimal_places=2, description="Total cost of transaction")
    reference_number: Optional[str] = Field(None, max_length=100, description="Reference number (invoice, receipt, etc.)")
    notes: Optional[str] = Field(None, description="Additional notes about the transaction")
    performed_by: Optional[int] = Field(None, description="User who performed the transaction")

    class Config:
        from_attributes = True


# ================================================================================
# Setting Schemas
# ================================================================================

class SettingDataType(str, Enum):
    """Enum for data_type"""
    STRING = "string"
    NUMBER = "number"
    BOOLEAN = "boolean"
    JSON = "json"

class SettingCreate(BaseModel):
    """Schema for creating a new setting"""
    section: str = Field(..., max_length=50, description="Setting section/category (e.g., 'display', 'security', 'inventory')")
    key: str = Field(..., max_length=100, description="Setting key/name (e.g., 'theme', 'sessionTimeout')")
    value: str = Field(..., description="Current setting value (stored as string, converted based on data_type)")
    default_value: str = Field(..., description="Default setting value for reset functionality")
    data_type: SettingDataType = Field(default="SettingDataType.STRING", max_length=7, description="Data type for proper value conversion")
    description: Optional[str] = Field(None, description="Human-readable description of the setting")

class SettingUpdate(BaseModel):
    """Schema for updating a setting"""
    section: Optional[str] = Field(None, max_length=50, description="Setting section/category (e.g., 'display', 'security', 'inventory')")
    key: Optional[str] = Field(None, max_length=100, description="Setting key/name (e.g., 'theme', 'sessionTimeout')")
    value: Optional[str] = Field(None, description="Current setting value (stored as string, converted based on data_type)")
    default_value: Optional[str] = Field(None, description="Default setting value for reset functionality")
    data_type: Optional[SettingDataType] = Field(None, max_length=7, description="Data type for proper value conversion")
    description: Optional[str] = Field(None, description="Human-readable description of the setting")

class SettingResponse(BaseModel):
    """Schema for setting response"""
    id: int = Field(..., description="Primary key")
    created_at: datetime = Field(..., description="Timestamp when the record was created")
    updated_at: datetime = Field(..., description="Timestamp when the record was last updated")
    section: str = Field(..., max_length=50, description="Setting section/category (e.g., 'display', 'security', 'inventory')")
    key: str = Field(..., max_length=100, description="Setting key/name (e.g., 'theme', 'sessionTimeout')")
    value: str = Field(..., description="Current setting value (stored as string, converted based on data_type)")
    default_value: str = Field(..., description="Default setting value for reset functionality")
    data_type: SettingDataType = Field(default="SettingDataType.STRING", max_length=7, description="Data type for proper value conversion")
    description: Optional[str] = Field(None, description="Human-readable description of the setting")

    class Config:
        from_attributes = True


# ================================================================================
# Settings Schemas
# ================================================================================

class SettingsCreate(BaseModel):
    """Schema for creating a new settings"""
    general_settings: Dict = Field(default={'storeName': 'MidLogic POS', 'businessName': '', 'storeAddress': '', 'storeCity': '', 'storeState': '', 'storeZip': '', 'storeCountry': '', 'storePhone': '', 'storeEmail': '', 'storeWebsite': '', 'logoUrl': '', 'operatingHours': {'monday': {'open': '09:00', 'close': '18:00', 'closed': False}, 'tuesday': {'open': '09:00', 'close': '18:00', 'closed': False}, 'wednesday': {'open': '09:00', 'close': '18:00', 'closed': False}, 'thursday': {'open': '09:00', 'close': '18:00', 'closed': False}, 'friday': {'open': '09:00', 'close': '18:00', 'closed': False}, 'saturday': {'open': '10:00', 'close': '16:00', 'closed': False}, 'sunday': {'open': '10:00', 'close': '16:00', 'closed': True}}, 'currency': 'USD', 'language': 'en', 'timezone': 'UTC'}, description="General store and regional settings")
    business_settings: Dict = Field(default={'mode': 'retail', 'enableTableManagement': False, 'enableReservations': False, 'enableKitchenDisplay': False, 'enableBarcodeScanner': True, 'enableLoyaltyProgram': False, 'enableQuickCheckout': True, 'currencyConfig': {'code': 'USD', 'symbol': '$', 'symbolPosition': 'before', 'decimalPlaces': 2, 'thousandSeparator': ',', 'decimalSeparator': '.', 'showCurrencyCode': False, 'regionSpecific': {'india': {'enabled': False, 'gstEnabled': True, 'showPaisa': True, 'useIndianNumbering': True}, 'middleEast': {'enabled': False, 'currency': 'AED', 'decimalPlaces': 2}}}}, description="Business mode and feature settings")
    tax_settings: Dict = Field(default={'defaultTaxRate': 0, 'taxInclusive': False, 'taxLabel': 'Tax', 'enableMultipleTaxRates': False}, description="Tax configuration settings")
    hardware_settings: Dict = Field(default={'printerEnabled': False, 'printerName': '', 'cashDrawerEnabled': False, 'barcodeReaderEnabled': False, 'displayEnabled': False}, description="Hardware and peripheral settings")
    receipt_settings: Dict = Field(default={'showLogo': False, 'logoUrl': '', 'headerText': 'Thank you for your purchase!', 'footerText': 'Please come again!', 'customHeader': '', 'customFooter': '', 'showTaxBreakdown': True, 'showBarcode': False, 'showQRCode': False, 'paperSize': 'A4'}, description="Receipt template and printing settings")
    inventory_settings: Dict = Field(default={'enableStockTracking': True, 'trackBySerialNumber': False, 'trackByBatchNumber': False, 'trackByExpiryDate': False, 'enableLowStockAlerts': True, 'lowStockThreshold': 10, 'lowStockThresholdType': 'absolute', 'enableOutOfStockAlerts': True, 'alertRecipients': [], 'stockDeductionMode': 'automatic', 'allowNegativeStock': False, 'deductOnSale': True, 'deductOnOrder': False, 'enableAutoReorder': False, 'autoReorderThreshold': 5, 'autoReorderQuantity': 20, 'enableReorderPointCalculation': False, 'defaultUOM': 'pieces', 'enableMultipleUOM': False, 'uomConversionEnabled': False, 'enableBarcodeScanning': True, 'barcodeFormat': 'EAN13', 'autoGenerateBarcode': False, 'barcodePrefix': '', 'enableMultiLocation': False, 'defaultLocation': 'Main Warehouse', 'transferBetweenLocations': False, 'valuationMethod': 'FIFO', 'enableCostTracking': True, 'enableWasteTracking': False, 'wasteReasons': ['Damaged', 'Expired', 'Lost', 'Other'], 'requireWasteApproval': False, 'enableStockAdjustment': True, 'requireAdjustmentReason': True, 'enableRecipeManagement': False, 'enablePortionControl': False, 'enablePrepItemTracking': False, 'ingredientCostTracking': True, 'enableVariantTracking': True, 'enableSKUManagement': True, 'enableSizeColorTracking': False}, description="Comprehensive inventory management settings")
    integration_settings: Dict = Field(default={'enableCloudSync': False, 'cloudSyncInterval': 60, 'enableEmailReceipts': False, 'smtpServer': '', 'smtpPort': 587, 'smtpUsername': ''}, description="Integration and sync settings")
    backup_settings: Dict = Field(default={'enableAutoBackup': False, 'backupInterval': 24, 'backupLocation': '', 'lastBackupDate': None}, description="Backup and restore settings")
    display_settings: Dict = Field(default={'theme': 'light', 'fontSize': 'medium', 'screenTimeout': 0}, description="Display and UI settings")
    security_settings: Dict = Field(default={'sessionTimeout': 0, 'requirePinForRefunds': True, 'requirePinForVoids': True, 'requirePinForDiscounts': False}, description="Security and access control settings")
    system_info: Dict = Field(default={'appVersion': '1.0.0', 'buildNumber': '1', 'lastUpdateCheck': None, 'databaseVersion': '1.0.0'}, description="System information and metadata")

class SettingsUpdate(BaseModel):
    """Schema for updating a settings"""
    general_settings: Optional[Dict] = Field(None, description="General store and regional settings")
    business_settings: Optional[Dict] = Field(None, description="Business mode and feature settings")
    tax_settings: Optional[Dict] = Field(None, description="Tax configuration settings")
    hardware_settings: Optional[Dict] = Field(None, description="Hardware and peripheral settings")
    receipt_settings: Optional[Dict] = Field(None, description="Receipt template and printing settings")
    inventory_settings: Optional[Dict] = Field(None, description="Comprehensive inventory management settings")
    integration_settings: Optional[Dict] = Field(None, description="Integration and sync settings")
    backup_settings: Optional[Dict] = Field(None, description="Backup and restore settings")
    display_settings: Optional[Dict] = Field(None, description="Display and UI settings")
    security_settings: Optional[Dict] = Field(None, description="Security and access control settings")
    system_info: Optional[Dict] = Field(None, description="System information and metadata")

class SettingsResponse(BaseModel):
    """Schema for settings response"""
    id: int = Field(..., description="Primary key")
    created_at: datetime = Field(..., description="Timestamp when the record was created")
    updated_at: datetime = Field(..., description="Timestamp when the record was last updated")
    general_settings: Dict = Field(default={'storeName': 'MidLogic POS', 'businessName': '', 'storeAddress': '', 'storeCity': '', 'storeState': '', 'storeZip': '', 'storeCountry': '', 'storePhone': '', 'storeEmail': '', 'storeWebsite': '', 'logoUrl': '', 'operatingHours': {'monday': {'open': '09:00', 'close': '18:00', 'closed': False}, 'tuesday': {'open': '09:00', 'close': '18:00', 'closed': False}, 'wednesday': {'open': '09:00', 'close': '18:00', 'closed': False}, 'thursday': {'open': '09:00', 'close': '18:00', 'closed': False}, 'friday': {'open': '09:00', 'close': '18:00', 'closed': False}, 'saturday': {'open': '10:00', 'close': '16:00', 'closed': False}, 'sunday': {'open': '10:00', 'close': '16:00', 'closed': True}}, 'currency': 'USD', 'language': 'en', 'timezone': 'UTC'}, description="General store and regional settings")
    business_settings: Dict = Field(default={'mode': 'retail', 'enableTableManagement': False, 'enableReservations': False, 'enableKitchenDisplay': False, 'enableBarcodeScanner': True, 'enableLoyaltyProgram': False, 'enableQuickCheckout': True, 'currencyConfig': {'code': 'USD', 'symbol': '$', 'symbolPosition': 'before', 'decimalPlaces': 2, 'thousandSeparator': ',', 'decimalSeparator': '.', 'showCurrencyCode': False, 'regionSpecific': {'india': {'enabled': False, 'gstEnabled': True, 'showPaisa': True, 'useIndianNumbering': True}, 'middleEast': {'enabled': False, 'currency': 'AED', 'decimalPlaces': 2}}}}, description="Business mode and feature settings")
    tax_settings: Dict = Field(default={'defaultTaxRate': 0, 'taxInclusive': False, 'taxLabel': 'Tax', 'enableMultipleTaxRates': False}, description="Tax configuration settings")
    hardware_settings: Dict = Field(default={'printerEnabled': False, 'printerName': '', 'cashDrawerEnabled': False, 'barcodeReaderEnabled': False, 'displayEnabled': False}, description="Hardware and peripheral settings")
    receipt_settings: Dict = Field(default={'showLogo': False, 'logoUrl': '', 'headerText': 'Thank you for your purchase!', 'footerText': 'Please come again!', 'customHeader': '', 'customFooter': '', 'showTaxBreakdown': True, 'showBarcode': False, 'showQRCode': False, 'paperSize': 'A4'}, description="Receipt template and printing settings")
    inventory_settings: Dict = Field(default={'enableStockTracking': True, 'trackBySerialNumber': False, 'trackByBatchNumber': False, 'trackByExpiryDate': False, 'enableLowStockAlerts': True, 'lowStockThreshold': 10, 'lowStockThresholdType': 'absolute', 'enableOutOfStockAlerts': True, 'alertRecipients': [], 'stockDeductionMode': 'automatic', 'allowNegativeStock': False, 'deductOnSale': True, 'deductOnOrder': False, 'enableAutoReorder': False, 'autoReorderThreshold': 5, 'autoReorderQuantity': 20, 'enableReorderPointCalculation': False, 'defaultUOM': 'pieces', 'enableMultipleUOM': False, 'uomConversionEnabled': False, 'enableBarcodeScanning': True, 'barcodeFormat': 'EAN13', 'autoGenerateBarcode': False, 'barcodePrefix': '', 'enableMultiLocation': False, 'defaultLocation': 'Main Warehouse', 'transferBetweenLocations': False, 'valuationMethod': 'FIFO', 'enableCostTracking': True, 'enableWasteTracking': False, 'wasteReasons': ['Damaged', 'Expired', 'Lost', 'Other'], 'requireWasteApproval': False, 'enableStockAdjustment': True, 'requireAdjustmentReason': True, 'enableRecipeManagement': False, 'enablePortionControl': False, 'enablePrepItemTracking': False, 'ingredientCostTracking': True, 'enableVariantTracking': True, 'enableSKUManagement': True, 'enableSizeColorTracking': False}, description="Comprehensive inventory management settings")
    integration_settings: Dict = Field(default={'enableCloudSync': False, 'cloudSyncInterval': 60, 'enableEmailReceipts': False, 'smtpServer': '', 'smtpPort': 587, 'smtpUsername': ''}, description="Integration and sync settings")
    backup_settings: Dict = Field(default={'enableAutoBackup': False, 'backupInterval': 24, 'backupLocation': '', 'lastBackupDate': None}, description="Backup and restore settings")
    display_settings: Dict = Field(default={'theme': 'light', 'fontSize': 'medium', 'screenTimeout': 0}, description="Display and UI settings")
    security_settings: Dict = Field(default={'sessionTimeout': 0, 'requirePinForRefunds': True, 'requirePinForVoids': True, 'requirePinForDiscounts': False}, description="Security and access control settings")
    system_info: Dict = Field(default={'appVersion': '1.0.0', 'buildNumber': '1', 'lastUpdateCheck': None, 'databaseVersion': '1.0.0'}, description="System information and metadata")

    class Config:
        from_attributes = True


# ================================================================================
# TaxRule Schemas
# ================================================================================

class TaxType(str, Enum):
    """Enum for tax_type"""
    SIMPLE = "simple"
    GST_CGST = "gst_cgst"
    GST_SGST = "gst_sgst"
    GST_IGST = "gst_igst"
    CESS = "cess"
    VAT = "vat"
    CUSTOM = "custom"

class TaxCalculationMethod(str, Enum):
    """Enum for calculation_method"""
    PERCENTAGE = "percentage"
    FIXED_AMOUNT = "fixed_amount"

class TaxInclusionType(str, Enum):
    """Enum for inclusion_type"""
    EXCLUSIVE = "exclusive"
    INCLUSIVE = "inclusive"

class RoundingMethod(str, Enum):
    """Enum for rounding_method"""
    ROUND_HALF_UP = "round_half_up"
    ROUND_UP = "round_up"
    ROUND_DOWN = "round_down"
    NO_ROUNDING = "no_rounding"

class TaxRuleCreate(BaseModel):
    """Schema for creating a new taxrule"""
    name: str = Field(..., max_length=100, description="Tax rule name (e.g., 'GST 18%', 'VAT 5%')")
    description: Optional[str] = Field(None, description="Detailed description of the tax rule")
    tax_type: TaxType = Field(default="TaxType.SIMPLE", max_length=8, description="Type of tax (simple, GST components, VAT, etc.)")
    rate: Decimal = Field(default=0, max_digits=5, decimal_places=2, description="Tax rate percentage (e.g., 18.00 for 18%)")
    calculation_method: TaxCalculationMethod = Field(default="TaxCalculationMethod.PERCENTAGE", max_length=12, description="Method for calculating tax (percentage or fixed amount)")
    fixed_amount: Optional[Decimal] = Field(None, max_digits=10, decimal_places=2, description="Fixed tax amount (used when calculation_method is fixed_amount)")
    inclusion_type: TaxInclusionType = Field(default="TaxInclusionType.EXCLUSIVE", max_length=9, description="Whether tax is inclusive (included in price) or exclusive (added to price)")
    rounding_method: RoundingMethod = Field(default="RoundingMethod.ROUND_HALF_UP", max_length=13, description="Method for rounding tax amounts")
    hsn_code: Optional[str] = Field(None, max_length=20, description="HSN (Harmonized System of Nomenclature) code for goods")
    sac_code: Optional[str] = Field(None, max_length=20, description="SAC (Services Accounting Code) for services")
    cgst_rate: Optional[Decimal] = Field(None, max_digits=5, decimal_places=2, description="CGST (Central GST) rate percentage")
    sgst_rate: Optional[Decimal] = Field(None, max_digits=5, decimal_places=2, description="SGST (State GST) rate percentage")
    igst_rate: Optional[Decimal] = Field(None, max_digits=5, decimal_places=2, description="IGST (Integrated GST) rate percentage")
    cess_rate: Optional[Decimal] = Field(None, max_digits=5, decimal_places=2, description="CESS rate percentage")
    applies_to_categories: Dict = Field(default_factory=list, description="List of product category IDs this tax applies to (empty = all categories)")
    applies_to_products: Dict = Field(default_factory=list, description="List of specific product IDs this tax applies to (empty = all products)")
    min_amount: Optional[Decimal] = Field(None, max_digits=10, decimal_places=2, description="Minimum transaction amount for this tax to apply")
    max_amount: Optional[Decimal] = Field(None, max_digits=10, decimal_places=2, description="Maximum transaction amount for this tax to apply")
    customer_types: Dict = Field(default_factory=list, description="List of customer types this tax applies to (e.g., ['retail', 'wholesale'])")
    is_tax_exempt: bool = Field(default=False, description="Whether this is a tax exemption rule (zero-rated)")
    effective_from: Optional[datetime] = Field(None, description="Date from which this tax rule is effective")
    effective_to: Optional[datetime] = Field(None, description="Date until which this tax rule is effective (null = no end date)")
    is_compound: bool = Field(default=False, description="Whether this tax is calculated on top of other taxes")
    compound_on_taxes: Dict = Field(default_factory=list, description="List of tax rule IDs this compound tax is calculated on")
    is_active: bool = Field(default=True, description="Whether this tax rule is currently active")
    priority: int = Field(default=0, description="Priority order for applying multiple taxes (higher = applied first)")
    created_by: Optional[int] = Field(None, description="User ID who created this tax rule")

class TaxRuleUpdate(BaseModel):
    """Schema for updating a taxrule"""
    name: Optional[str] = Field(None, max_length=100, description="Tax rule name (e.g., 'GST 18%', 'VAT 5%')")
    description: Optional[str] = Field(None, description="Detailed description of the tax rule")
    tax_type: Optional[TaxType] = Field(None, max_length=8, description="Type of tax (simple, GST components, VAT, etc.)")
    rate: Optional[Decimal] = Field(None, max_digits=5, decimal_places=2, description="Tax rate percentage (e.g., 18.00 for 18%)")
    calculation_method: Optional[TaxCalculationMethod] = Field(None, max_length=12, description="Method for calculating tax (percentage or fixed amount)")
    fixed_amount: Optional[Decimal] = Field(None, max_digits=10, decimal_places=2, description="Fixed tax amount (used when calculation_method is fixed_amount)")
    inclusion_type: Optional[TaxInclusionType] = Field(None, max_length=9, description="Whether tax is inclusive (included in price) or exclusive (added to price)")
    rounding_method: Optional[RoundingMethod] = Field(None, max_length=13, description="Method for rounding tax amounts")
    hsn_code: Optional[str] = Field(None, max_length=20, description="HSN (Harmonized System of Nomenclature) code for goods")
    sac_code: Optional[str] = Field(None, max_length=20, description="SAC (Services Accounting Code) for services")
    cgst_rate: Optional[Decimal] = Field(None, max_digits=5, decimal_places=2, description="CGST (Central GST) rate percentage")
    sgst_rate: Optional[Decimal] = Field(None, max_digits=5, decimal_places=2, description="SGST (State GST) rate percentage")
    igst_rate: Optional[Decimal] = Field(None, max_digits=5, decimal_places=2, description="IGST (Integrated GST) rate percentage")
    cess_rate: Optional[Decimal] = Field(None, max_digits=5, decimal_places=2, description="CESS rate percentage")
    applies_to_categories: Optional[Dict] = Field(None, description="List of product category IDs this tax applies to (empty = all categories)")
    applies_to_products: Optional[Dict] = Field(None, description="List of specific product IDs this tax applies to (empty = all products)")
    min_amount: Optional[Decimal] = Field(None, max_digits=10, decimal_places=2, description="Minimum transaction amount for this tax to apply")
    max_amount: Optional[Decimal] = Field(None, max_digits=10, decimal_places=2, description="Maximum transaction amount for this tax to apply")
    customer_types: Optional[Dict] = Field(None, description="List of customer types this tax applies to (e.g., ['retail', 'wholesale'])")
    is_tax_exempt: Optional[bool] = Field(None, description="Whether this is a tax exemption rule (zero-rated)")
    effective_from: Optional[datetime] = Field(None, description="Date from which this tax rule is effective")
    effective_to: Optional[datetime] = Field(None, description="Date until which this tax rule is effective (null = no end date)")
    is_compound: Optional[bool] = Field(None, description="Whether this tax is calculated on top of other taxes")
    compound_on_taxes: Optional[Dict] = Field(None, description="List of tax rule IDs this compound tax is calculated on")
    is_active: Optional[bool] = Field(None, description="Whether this tax rule is currently active")
    priority: Optional[int] = Field(None, description="Priority order for applying multiple taxes (higher = applied first)")
    created_by: Optional[int] = Field(None, description="User ID who created this tax rule")

class TaxRuleResponse(BaseModel):
    """Schema for taxrule response"""
    id: int = Field(...)
    name: str = Field(..., max_length=100, description="Tax rule name (e.g., 'GST 18%', 'VAT 5%')")
    description: Optional[str] = Field(None, description="Detailed description of the tax rule")
    tax_type: TaxType = Field(default="TaxType.SIMPLE", max_length=8, description="Type of tax (simple, GST components, VAT, etc.)")
    rate: Decimal = Field(default=0, max_digits=5, decimal_places=2, description="Tax rate percentage (e.g., 18.00 for 18%)")
    calculation_method: TaxCalculationMethod = Field(default="TaxCalculationMethod.PERCENTAGE", max_length=12, description="Method for calculating tax (percentage or fixed amount)")
    fixed_amount: Optional[Decimal] = Field(None, max_digits=10, decimal_places=2, description="Fixed tax amount (used when calculation_method is fixed_amount)")
    inclusion_type: TaxInclusionType = Field(default="TaxInclusionType.EXCLUSIVE", max_length=9, description="Whether tax is inclusive (included in price) or exclusive (added to price)")
    rounding_method: RoundingMethod = Field(default="RoundingMethod.ROUND_HALF_UP", max_length=13, description="Method for rounding tax amounts")
    hsn_code: Optional[str] = Field(None, max_length=20, description="HSN (Harmonized System of Nomenclature) code for goods")
    sac_code: Optional[str] = Field(None, max_length=20, description="SAC (Services Accounting Code) for services")
    cgst_rate: Optional[Decimal] = Field(None, max_digits=5, decimal_places=2, description="CGST (Central GST) rate percentage")
    sgst_rate: Optional[Decimal] = Field(None, max_digits=5, decimal_places=2, description="SGST (State GST) rate percentage")
    igst_rate: Optional[Decimal] = Field(None, max_digits=5, decimal_places=2, description="IGST (Integrated GST) rate percentage")
    cess_rate: Optional[Decimal] = Field(None, max_digits=5, decimal_places=2, description="CESS rate percentage")
    applies_to_categories: Dict = Field(default_factory=list, description="List of product category IDs this tax applies to (empty = all categories)")
    applies_to_products: Dict = Field(default_factory=list, description="List of specific product IDs this tax applies to (empty = all products)")
    min_amount: Optional[Decimal] = Field(None, max_digits=10, decimal_places=2, description="Minimum transaction amount for this tax to apply")
    max_amount: Optional[Decimal] = Field(None, max_digits=10, decimal_places=2, description="Maximum transaction amount for this tax to apply")
    customer_types: Dict = Field(default_factory=list, description="List of customer types this tax applies to (e.g., ['retail', 'wholesale'])")
    is_tax_exempt: bool = Field(default=False, description="Whether this is a tax exemption rule (zero-rated)")
    effective_from: Optional[datetime] = Field(None, description="Date from which this tax rule is effective")
    effective_to: Optional[datetime] = Field(None, description="Date until which this tax rule is effective (null = no end date)")
    is_compound: bool = Field(default=False, description="Whether this tax is calculated on top of other taxes")
    compound_on_taxes: Dict = Field(default_factory=list, description="List of tax rule IDs this compound tax is calculated on")
    is_active: bool = Field(default=True, description="Whether this tax rule is currently active")
    priority: int = Field(default=0, description="Priority order for applying multiple taxes (higher = applied first)")
    created_at: datetime = Field(...)
    updated_at: datetime = Field(...)
    created_by: Optional[int] = Field(None, description="User ID who created this tax rule")

    class Config:
        from_attributes = True


# ================================================================================
# Sale Schemas
# ================================================================================

class PaymentMethod(str, Enum):
    """Enum for payment_method"""
    CASH = "cash"
    CARD = "card"
    MOBILE = "mobile"
    CREDIT = "credit"
    MIXED = "mixed"

class SaleStatus(str, Enum):
    """Enum for status"""
    COMPLETED = "completed"
    PENDING = "pending"
    REFUNDED = "refunded"
    PARTIALLY_REFUNDED = "partially_refunded"
    CANCELLED = "cancelled"

class SaleCreate(BaseModel):
    """Schema for creating a new sale"""
    invoice_number: str = Field(..., max_length=100, description="Unique invoice number")
    customer: Optional[int] = Field(None, description="Customer associated with this sale")
    subtotal: Decimal = Field(default=0.00, max_digits=10, decimal_places=2, description="Subtotal before tax and discounts")
    tax_amount: Decimal = Field(default=0.00, max_digits=10, decimal_places=2, description="Total tax amount")
    discount_amount: Decimal = Field(default=0.00, max_digits=10, decimal_places=2, description="Total discount amount")
    total_amount: Decimal = Field(default=0.00, max_digits=10, decimal_places=2, description="Final total amount")
    payment_method: PaymentMethod = Field(default="PaymentMethod.CASH", max_length=6, description="Payment method used")
    amount_paid: Decimal = Field(default=0.00, max_digits=10, decimal_places=2, description="Amount paid by customer")
    change_given: Decimal = Field(default=0.00, max_digits=10, decimal_places=2, description="Change given to customer")
    status: SaleStatus = Field(default="SaleStatus.COMPLETED", max_length=18, description="Sale status")
    notes: Optional[str] = Field(None, description="Additional notes about the sale")
    items: Dict = Field(default_factory=list, description="List of items sold with details")
    sold_by: Optional[int] = Field(None, description="User who processed this sale")
    sale_date: datetime = Field(..., description="Date and time of sale")

class SaleUpdate(BaseModel):
    """Schema for updating a sale"""
    invoice_number: Optional[str] = Field(None, max_length=100, description="Unique invoice number")
    customer: Optional[int] = Field(None, description="Customer associated with this sale")
    subtotal: Optional[Decimal] = Field(None, max_digits=10, decimal_places=2, description="Subtotal before tax and discounts")
    tax_amount: Optional[Decimal] = Field(None, max_digits=10, decimal_places=2, description="Total tax amount")
    discount_amount: Optional[Decimal] = Field(None, max_digits=10, decimal_places=2, description="Total discount amount")
    total_amount: Optional[Decimal] = Field(None, max_digits=10, decimal_places=2, description="Final total amount")
    payment_method: Optional[PaymentMethod] = Field(None, max_length=6, description="Payment method used")
    amount_paid: Optional[Decimal] = Field(None, max_digits=10, decimal_places=2, description="Amount paid by customer")
    change_given: Optional[Decimal] = Field(None, max_digits=10, decimal_places=2, description="Change given to customer")
    status: Optional[SaleStatus] = Field(None, max_length=18, description="Sale status")
    notes: Optional[str] = Field(None, description="Additional notes about the sale")
    items: Optional[Dict] = Field(None, description="List of items sold with details")
    sold_by: Optional[int] = Field(None, description="User who processed this sale")
    sale_date: Optional[datetime] = Field(None, description="Date and time of sale")

class SaleResponse(BaseModel):
    """Schema for sale response"""
    id: int = Field(..., description="Primary key")
    created_at: datetime = Field(..., description="Timestamp when the record was created")
    updated_at: datetime = Field(..., description="Timestamp when the record was last updated")
    invoice_number: str = Field(..., max_length=100, description="Unique invoice number")
    customer: Optional[int] = Field(None, description="Customer associated with this sale")
    subtotal: Decimal = Field(default=0.00, max_digits=10, decimal_places=2, description="Subtotal before tax and discounts")
    tax_amount: Decimal = Field(default=0.00, max_digits=10, decimal_places=2, description="Total tax amount")
    discount_amount: Decimal = Field(default=0.00, max_digits=10, decimal_places=2, description="Total discount amount")
    total_amount: Decimal = Field(default=0.00, max_digits=10, decimal_places=2, description="Final total amount")
    payment_method: PaymentMethod = Field(default="PaymentMethod.CASH", max_length=6, description="Payment method used")
    amount_paid: Decimal = Field(default=0.00, max_digits=10, decimal_places=2, description="Amount paid by customer")
    change_given: Decimal = Field(default=0.00, max_digits=10, decimal_places=2, description="Change given to customer")
    status: SaleStatus = Field(default="SaleStatus.COMPLETED", max_length=18, description="Sale status")
    notes: Optional[str] = Field(None, description="Additional notes about the sale")
    items: Dict = Field(default_factory=list, description="List of items sold with details")
    sold_by: Optional[int] = Field(None, description="User who processed this sale")
    sale_date: datetime = Field(..., description="Date and time of sale")

    class Config:
        from_attributes = True


# ================================================================================
# CashTransaction Schemas
# ================================================================================

class CashTransactionType(str, Enum):
    """Enum for transaction_type"""
    CASH_IN = "cash_in"
    CASH_OUT = "cash_out"
    OPENING_BALANCE = "opening_balance"
    CLOSING_BALANCE = "closing_balance"

class CashTransactionCreate(BaseModel):
    """Schema for creating a new cashtransaction"""
    transaction_type: CashTransactionType = Field(..., max_length=15, description="Type of cash transaction")
    amount: Decimal = Field(..., max_digits=10, decimal_places=2, description="Transaction amount")
    balance_before: Decimal = Field(default=0.00, max_digits=10, decimal_places=2, description="Cash balance before transaction")
    balance_after: Decimal = Field(default=0.00, max_digits=10, decimal_places=2, description="Cash balance after transaction")
    reference_number: Optional[str] = Field(None, max_length=100, description="Reference number (receipt, invoice, etc.)")
    category: Optional[str] = Field(None, max_length=100, description="Transaction category (e.g., 'Sales', 'Supplier Payment', 'Petty Cash')")
    description: Optional[str] = Field(None, description="Description of the transaction")
    notes: Optional[str] = Field(None, description="Additional notes")
    performed_by: Optional[int] = Field(None, description="User who performed this transaction")
    transaction_date: datetime = Field(..., description="Date and time of transaction")

class CashTransactionUpdate(BaseModel):
    """Schema for updating a cashtransaction"""
    transaction_type: Optional[CashTransactionType] = Field(None, max_length=15, description="Type of cash transaction")
    amount: Optional[Decimal] = Field(None, max_digits=10, decimal_places=2, description="Transaction amount")
    balance_before: Optional[Decimal] = Field(None, max_digits=10, decimal_places=2, description="Cash balance before transaction")
    balance_after: Optional[Decimal] = Field(None, max_digits=10, decimal_places=2, description="Cash balance after transaction")
    reference_number: Optional[str] = Field(None, max_length=100, description="Reference number (receipt, invoice, etc.)")
    category: Optional[str] = Field(None, max_length=100, description="Transaction category (e.g., 'Sales', 'Supplier Payment', 'Petty Cash')")
    description: Optional[str] = Field(None, description="Description of the transaction")
    notes: Optional[str] = Field(None, description="Additional notes")
    performed_by: Optional[int] = Field(None, description="User who performed this transaction")
    transaction_date: Optional[datetime] = Field(None, description="Date and time of transaction")

class CashTransactionResponse(BaseModel):
    """Schema for cashtransaction response"""
    id: int = Field(..., description="Primary key")
    created_at: datetime = Field(..., description="Timestamp when the record was created")
    updated_at: datetime = Field(..., description="Timestamp when the record was last updated")
    transaction_type: CashTransactionType = Field(..., max_length=15, description="Type of cash transaction")
    amount: Decimal = Field(..., max_digits=10, decimal_places=2, description="Transaction amount")
    balance_before: Decimal = Field(default=0.00, max_digits=10, decimal_places=2, description="Cash balance before transaction")
    balance_after: Decimal = Field(default=0.00, max_digits=10, decimal_places=2, description="Cash balance after transaction")
    reference_number: Optional[str] = Field(None, max_length=100, description="Reference number (receipt, invoice, etc.)")
    category: Optional[str] = Field(None, max_length=100, description="Transaction category (e.g., 'Sales', 'Supplier Payment', 'Petty Cash')")
    description: Optional[str] = Field(None, description="Description of the transaction")
    notes: Optional[str] = Field(None, description="Additional notes")
    performed_by: Optional[int] = Field(None, description="User who performed this transaction")
    transaction_date: datetime = Field(..., description="Date and time of transaction")

    class Config:
        from_attributes = True


# ================================================================================
# Expense Schemas
# ================================================================================

class ExpenseCategory(str, Enum):
    """Enum for category"""
    RENT = "rent"
    UTILITIES = "utilities"
    SALARIES = "salaries"
    SUPPLIES = "supplies"
    MARKETING = "marketing"
    MAINTENANCE = "maintenance"
    TRANSPORTATION = "transportation"
    INSURANCE = "insurance"
    TAXES = "taxes"
    OTHER = "other"

class ExpenseStatus(str, Enum):
    """Enum for status"""
    PENDING = "pending"
    APPROVED = "approved"
    PAID = "paid"
    REJECTED = "rejected"

class ExpenseCreate(BaseModel):
    """Schema for creating a new expense"""
    expense_number: str = Field(..., max_length=100, description="Unique expense reference number")
    title: str = Field(..., max_length=255, description="Expense title/name")
    description: Optional[str] = Field(None, description="Detailed description of the expense")
    amount: Decimal = Field(..., max_digits=10, decimal_places=2, description="Expense amount")
    category: ExpenseCategory = Field(default="ExpenseCategory.OTHER", max_length=14, description="Expense category")
    status: ExpenseStatus = Field(default="ExpenseStatus.PENDING", max_length=8, description="Expense status")
    vendor_name: Optional[str] = Field(None, max_length=255, description="Vendor or payee name")
    vendor_contact: Optional[str] = Field(None, max_length=100, description="Vendor contact information")
    payment_method: Optional[str] = Field(None, max_length=50, description="Payment method used")
    payment_reference: Optional[str] = Field(None, max_length=100, description="Payment reference number")
    payment_date: Optional[datetime] = Field(None, description="Date when payment was made")
    expense_date: datetime = Field(..., description="Date when expense was incurred")
    due_date: Optional[datetime] = Field(None, description="Payment due date")
    attachments: Dict = Field(default_factory=list, description="List of attachment file paths or URLs")
    created_by: Optional[int] = Field(None, description="User who created this expense")
    approved_by: Optional[int] = Field(None, description="User who approved this expense")
    notes: Optional[str] = Field(None, description="Additional notes")

class ExpenseUpdate(BaseModel):
    """Schema for updating a expense"""
    expense_number: Optional[str] = Field(None, max_length=100, description="Unique expense reference number")
    title: Optional[str] = Field(None, max_length=255, description="Expense title/name")
    description: Optional[str] = Field(None, description="Detailed description of the expense")
    amount: Optional[Decimal] = Field(None, max_digits=10, decimal_places=2, description="Expense amount")
    category: Optional[ExpenseCategory] = Field(None, max_length=14, description="Expense category")
    status: Optional[ExpenseStatus] = Field(None, max_length=8, description="Expense status")
    vendor_name: Optional[str] = Field(None, max_length=255, description="Vendor or payee name")
    vendor_contact: Optional[str] = Field(None, max_length=100, description="Vendor contact information")
    payment_method: Optional[str] = Field(None, max_length=50, description="Payment method used")
    payment_reference: Optional[str] = Field(None, max_length=100, description="Payment reference number")
    payment_date: Optional[datetime] = Field(None, description="Date when payment was made")
    expense_date: Optional[datetime] = Field(None, description="Date when expense was incurred")
    due_date: Optional[datetime] = Field(None, description="Payment due date")
    attachments: Optional[Dict] = Field(None, description="List of attachment file paths or URLs")
    created_by: Optional[int] = Field(None, description="User who created this expense")
    approved_by: Optional[int] = Field(None, description="User who approved this expense")
    notes: Optional[str] = Field(None, description="Additional notes")

class ExpenseResponse(BaseModel):
    """Schema for expense response"""
    id: int = Field(..., description="Primary key")
    created_at: datetime = Field(..., description="Timestamp when the record was created")
    updated_at: datetime = Field(..., description="Timestamp when the record was last updated")
    expense_number: str = Field(..., max_length=100, description="Unique expense reference number")
    title: str = Field(..., max_length=255, description="Expense title/name")
    description: Optional[str] = Field(None, description="Detailed description of the expense")
    amount: Decimal = Field(..., max_digits=10, decimal_places=2, description="Expense amount")
    category: ExpenseCategory = Field(default="ExpenseCategory.OTHER", max_length=14, description="Expense category")
    status: ExpenseStatus = Field(default="ExpenseStatus.PENDING", max_length=8, description="Expense status")
    vendor_name: Optional[str] = Field(None, max_length=255, description="Vendor or payee name")
    vendor_contact: Optional[str] = Field(None, max_length=100, description="Vendor contact information")
    payment_method: Optional[str] = Field(None, max_length=50, description="Payment method used")
    payment_reference: Optional[str] = Field(None, max_length=100, description="Payment reference number")
    payment_date: Optional[datetime] = Field(None, description="Date when payment was made")
    expense_date: datetime = Field(..., description="Date when expense was incurred")
    due_date: Optional[datetime] = Field(None, description="Payment due date")
    attachments: Dict = Field(default_factory=list, description="List of attachment file paths or URLs")
    created_by: Optional[int] = Field(None, description="User who created this expense")
    approved_by: Optional[int] = Field(None, description="User who approved this expense")
    notes: Optional[str] = Field(None, description="Additional notes")

    class Config:
        from_attributes = True


# ================================================================================
# Discount Schemas
# ================================================================================

class DiscountType(str, Enum):
    """Enum for discount_type"""
    PERCENTAGE = "percentage"
    FIXED_AMOUNT = "fixed_amount"
    BUY_X_GET_Y = "buy_x_get_y"
    BUNDLE = "bundle"
    FREE_SHIPPING = "free_shipping"

class DiscountStatus(str, Enum):
    """Enum for status"""
    ACTIVE = "active"
    INACTIVE = "inactive"
    SCHEDULED = "scheduled"
    EXPIRED = "expired"
    DRAFT = "draft"

class DiscountCreate(BaseModel):
    """Schema for creating a new discount"""
    code: str = Field(..., max_length=50, description="Unique discount code")
    name: str = Field(..., max_length=200, description="Display name for the discount")
    description: Optional[str] = Field(None, description="Detailed description of the discount")
    discount_type: DiscountType = Field(default="DiscountType.PERCENTAGE", max_length=13, description="Type of discount")
    value: Decimal = Field(..., max_digits=10, decimal_places=2, description="Discount value (percentage or fixed amount)")
    max_discount_amount: Optional[Decimal] = Field(None, max_digits=10, decimal_places=2, description="Maximum discount amount cap")
    min_purchase_amount: Optional[Decimal] = Field(None, max_digits=10, decimal_places=2, description="Minimum purchase amount required")
    min_quantity: Optional[int] = Field(None, description="Minimum quantity of items required")
    applicable_products: Dict = Field(default_factory=list, description="List of product IDs this discount applies to")
    applicable_categories: Dict = Field(default_factory=list, description="List of category IDs this discount applies to")
    applicable_customer_segments: Dict = Field(default_factory=list, description="Customer segments eligible for this discount")
    first_purchase_only: bool = Field(default=False, description="Only applicable to first-time customers")
    buy_quantity: Optional[int] = Field(None, description="Buy X quantity (for buy_x_get_y type)")
    get_quantity: Optional[int] = Field(None, description="Get Y quantity free (for buy_x_get_y type)")
    bundle_products: Dict = Field(default_factory=list, description="Products required in bundle")
    usage_limit: Optional[int] = Field(None, description="Maximum number of times this discount can be used")
    usage_limit_per_customer: Optional[int] = Field(None, description="Maximum uses per customer")
    usage_count: int = Field(default=0, description="Current usage count")
    valid_from: Optional[datetime] = Field(None, description="Start date/time for discount validity")
    valid_until: Optional[datetime] = Field(None, description="End date/time for discount validity")
    time_restrictions: Dict = Field(default_factory=dict, description="Time-based restrictions (days, hours)")
    priority: int = Field(default=0, description="Priority for applying multiple discounts (higher = first)")
    can_stack: bool = Field(default=False, description="Can be combined with other discounts")
    stackable_with: Dict = Field(default_factory=list, description="List of discount IDs this can stack with")
    auto_apply: bool = Field(default=False, description="Automatically apply if conditions are met")
    status: DiscountStatus = Field(default="DiscountStatus.DRAFT", max_length=9, description="Current status of the discount")
    is_active: bool = Field(default=True, description="Whether the discount is currently active")
    created_by: Optional[int] = Field(None, description="User who created this discount")
    total_revenue_impact: Decimal = Field(default=0.00, max_digits=15, decimal_places=2, description="Total revenue impact (discount amount given)")
    total_orders: int = Field(default=0, description="Total number of orders using this discount")
    notes: Optional[str] = Field(None, description="Internal notes about the discount")
    tags: Dict = Field(default_factory=list, description="Tags for categorizing discounts")

class DiscountUpdate(BaseModel):
    """Schema for updating a discount"""
    code: Optional[str] = Field(None, max_length=50, description="Unique discount code")
    name: Optional[str] = Field(None, max_length=200, description="Display name for the discount")
    description: Optional[str] = Field(None, description="Detailed description of the discount")
    discount_type: Optional[DiscountType] = Field(None, max_length=13, description="Type of discount")
    value: Optional[Decimal] = Field(None, max_digits=10, decimal_places=2, description="Discount value (percentage or fixed amount)")
    max_discount_amount: Optional[Decimal] = Field(None, max_digits=10, decimal_places=2, description="Maximum discount amount cap")
    min_purchase_amount: Optional[Decimal] = Field(None, max_digits=10, decimal_places=2, description="Minimum purchase amount required")
    min_quantity: Optional[int] = Field(None, description="Minimum quantity of items required")
    applicable_products: Optional[Dict] = Field(None, description="List of product IDs this discount applies to")
    applicable_categories: Optional[Dict] = Field(None, description="List of category IDs this discount applies to")
    applicable_customer_segments: Optional[Dict] = Field(None, description="Customer segments eligible for this discount")
    first_purchase_only: Optional[bool] = Field(None, description="Only applicable to first-time customers")
    buy_quantity: Optional[int] = Field(None, description="Buy X quantity (for buy_x_get_y type)")
    get_quantity: Optional[int] = Field(None, description="Get Y quantity free (for buy_x_get_y type)")
    bundle_products: Optional[Dict] = Field(None, description="Products required in bundle")
    usage_limit: Optional[int] = Field(None, description="Maximum number of times this discount can be used")
    usage_limit_per_customer: Optional[int] = Field(None, description="Maximum uses per customer")
    usage_count: Optional[int] = Field(None, description="Current usage count")
    valid_from: Optional[datetime] = Field(None, description="Start date/time for discount validity")
    valid_until: Optional[datetime] = Field(None, description="End date/time for discount validity")
    time_restrictions: Optional[Dict] = Field(None, description="Time-based restrictions (days, hours)")
    priority: Optional[int] = Field(None, description="Priority for applying multiple discounts (higher = first)")
    can_stack: Optional[bool] = Field(None, description="Can be combined with other discounts")
    stackable_with: Optional[Dict] = Field(None, description="List of discount IDs this can stack with")
    auto_apply: Optional[bool] = Field(None, description="Automatically apply if conditions are met")
    status: Optional[DiscountStatus] = Field(None, max_length=9, description="Current status of the discount")
    is_active: Optional[bool] = Field(None, description="Whether the discount is currently active")
    created_by: Optional[int] = Field(None, description="User who created this discount")
    total_revenue_impact: Optional[Decimal] = Field(None, max_digits=15, decimal_places=2, description="Total revenue impact (discount amount given)")
    total_orders: Optional[int] = Field(None, description="Total number of orders using this discount")
    notes: Optional[str] = Field(None, description="Internal notes about the discount")
    tags: Optional[Dict] = Field(None, description="Tags for categorizing discounts")

class DiscountResponse(BaseModel):
    """Schema for discount response"""
    id: int = Field(..., description="Primary key")
    created_at: datetime = Field(..., description="Timestamp when the record was created")
    updated_at: datetime = Field(..., description="Timestamp when the record was last updated")
    code: str = Field(..., max_length=50, description="Unique discount code")
    name: str = Field(..., max_length=200, description="Display name for the discount")
    description: Optional[str] = Field(None, description="Detailed description of the discount")
    discount_type: DiscountType = Field(default="DiscountType.PERCENTAGE", max_length=13, description="Type of discount")
    value: Decimal = Field(..., max_digits=10, decimal_places=2, description="Discount value (percentage or fixed amount)")
    max_discount_amount: Optional[Decimal] = Field(None, max_digits=10, decimal_places=2, description="Maximum discount amount cap")
    min_purchase_amount: Optional[Decimal] = Field(None, max_digits=10, decimal_places=2, description="Minimum purchase amount required")
    min_quantity: Optional[int] = Field(None, description="Minimum quantity of items required")
    applicable_products: Dict = Field(default_factory=list, description="List of product IDs this discount applies to")
    applicable_categories: Dict = Field(default_factory=list, description="List of category IDs this discount applies to")
    applicable_customer_segments: Dict = Field(default_factory=list, description="Customer segments eligible for this discount")
    first_purchase_only: bool = Field(default=False, description="Only applicable to first-time customers")
    buy_quantity: Optional[int] = Field(None, description="Buy X quantity (for buy_x_get_y type)")
    get_quantity: Optional[int] = Field(None, description="Get Y quantity free (for buy_x_get_y type)")
    bundle_products: Dict = Field(default_factory=list, description="Products required in bundle")
    usage_limit: Optional[int] = Field(None, description="Maximum number of times this discount can be used")
    usage_limit_per_customer: Optional[int] = Field(None, description="Maximum uses per customer")
    usage_count: int = Field(default=0, description="Current usage count")
    valid_from: Optional[datetime] = Field(None, description="Start date/time for discount validity")
    valid_until: Optional[datetime] = Field(None, description="End date/time for discount validity")
    time_restrictions: Dict = Field(default_factory=dict, description="Time-based restrictions (days, hours)")
    priority: int = Field(default=0, description="Priority for applying multiple discounts (higher = first)")
    can_stack: bool = Field(default=False, description="Can be combined with other discounts")
    stackable_with: Dict = Field(default_factory=list, description="List of discount IDs this can stack with")
    auto_apply: bool = Field(default=False, description="Automatically apply if conditions are met")
    status: DiscountStatus = Field(default="DiscountStatus.DRAFT", max_length=9, description="Current status of the discount")
    is_active: bool = Field(default=True, description="Whether the discount is currently active")
    created_by: Optional[int] = Field(None, description="User who created this discount")
    total_revenue_impact: Decimal = Field(default=0.00, max_digits=15, decimal_places=2, description="Total revenue impact (discount amount given)")
    total_orders: int = Field(default=0, description="Total number of orders using this discount")
    notes: Optional[str] = Field(None, description="Internal notes about the discount")
    tags: Dict = Field(default_factory=list, description="Tags for categorizing discounts")

    class Config:
        from_attributes = True


# ================================================================================
# DiscountUsage Schemas
# ================================================================================

class DiscountUsageCreate(BaseModel):
    """Schema for creating a new discountusage"""
    discount: int = Field(..., description="Discount that was used")
    sale: Optional[int] = Field(None, description="Sale where discount was applied")
    customer: Optional[int] = Field(None, description="Customer who used the discount")
    discount_amount: Decimal = Field(..., max_digits=10, decimal_places=2, description="Actual discount amount applied")
    original_amount: Decimal = Field(..., max_digits=10, decimal_places=2, description="Original amount before discount")
    final_amount: Decimal = Field(..., max_digits=10, decimal_places=2, description="Final amount after discount")
    applied_by: Optional[int] = Field(None, description="User who applied the discount")
    usage_date: datetime = Field(..., description="When the discount was used")
    metadata: Dict = Field(default_factory=dict, description="Additional context about the usage")

class DiscountUsageUpdate(BaseModel):
    """Schema for updating a discountusage"""
    discount: Optional[int] = Field(None, description="Discount that was used")
    sale: Optional[int] = Field(None, description="Sale where discount was applied")
    customer: Optional[int] = Field(None, description="Customer who used the discount")
    discount_amount: Optional[Decimal] = Field(None, max_digits=10, decimal_places=2, description="Actual discount amount applied")
    original_amount: Optional[Decimal] = Field(None, max_digits=10, decimal_places=2, description="Original amount before discount")
    final_amount: Optional[Decimal] = Field(None, max_digits=10, decimal_places=2, description="Final amount after discount")
    applied_by: Optional[int] = Field(None, description="User who applied the discount")
    usage_date: Optional[datetime] = Field(None, description="When the discount was used")
    metadata: Optional[Dict] = Field(None, description="Additional context about the usage")

class DiscountUsageResponse(BaseModel):
    """Schema for discountusage response"""
    id: int = Field(..., description="Primary key")
    created_at: datetime = Field(..., description="Timestamp when the record was created")
    updated_at: datetime = Field(..., description="Timestamp when the record was last updated")
    discount: int = Field(..., description="Discount that was used")
    sale: Optional[int] = Field(None, description="Sale where discount was applied")
    customer: Optional[int] = Field(None, description="Customer who used the discount")
    discount_amount: Decimal = Field(..., max_digits=10, decimal_places=2, description="Actual discount amount applied")
    original_amount: Decimal = Field(..., max_digits=10, decimal_places=2, description="Original amount before discount")
    final_amount: Decimal = Field(..., max_digits=10, decimal_places=2, description="Final amount after discount")
    applied_by: Optional[int] = Field(None, description="User who applied the discount")
    usage_date: datetime = Field(..., description="When the discount was used")
    metadata: Dict = Field(default_factory=dict, description="Additional context about the usage")

    class Config:
        from_attributes = True


# ================================================================================
# UserActivityLog Schemas
# ================================================================================

class UserActivityLogCreate(BaseModel):
    """Schema for creating a new useractivitylog"""
    user: int = Field(..., description="User who performed this activity")
    activity_type: str = Field(..., max_length=50, description="Type of activity performed")
    description: Optional[str] = Field(None, description="Detailed description of the activity")
    session_id: Optional[str] = Field(None, max_length=100, description="Session identifier for grouping activities")
    ip_address: Optional[str] = Field(None, max_length=45, description="IP address of the user (IPv4 or IPv6)")
    duration_ms: Optional[int] = Field(None, description="Duration of the activity in milliseconds")
    metadata: Optional[Dict] = Field(None, description="Additional metadata about the activity (JSON)")

class UserActivityLogUpdate(BaseModel):
    """Schema for updating a useractivitylog"""
    user: Optional[int] = Field(None, description="User who performed this activity")
    activity_type: Optional[str] = Field(None, max_length=50, description="Type of activity performed")
    description: Optional[str] = Field(None, description="Detailed description of the activity")
    session_id: Optional[str] = Field(None, max_length=100, description="Session identifier for grouping activities")
    ip_address: Optional[str] = Field(None, max_length=45, description="IP address of the user (IPv4 or IPv6)")
    duration_ms: Optional[int] = Field(None, description="Duration of the activity in milliseconds")
    metadata: Optional[Dict] = Field(None, description="Additional metadata about the activity (JSON)")

class UserActivityLogResponse(BaseModel):
    """Schema for useractivitylog response"""
    id: int = Field(..., description="Primary key")
    created_at: datetime = Field(..., description="Timestamp when the record was created")
    updated_at: datetime = Field(..., description="Timestamp when the record was last updated")
    user: int = Field(..., description="User who performed this activity")
    activity_type: str = Field(..., max_length=50, description="Type of activity performed")
    description: Optional[str] = Field(None, description="Detailed description of the activity")
    session_id: Optional[str] = Field(None, max_length=100, description="Session identifier for grouping activities")
    ip_address: Optional[str] = Field(None, max_length=45, description="IP address of the user (IPv4 or IPv6)")
    duration_ms: Optional[int] = Field(None, description="Duration of the activity in milliseconds")
    metadata: Optional[Dict] = Field(None, description="Additional metadata about the activity (JSON)")

    class Config:
        from_attributes = True
